package com.example.framework.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CACHE_ADDRESS".
*/
public class CacheAddressDao extends AbstractDao<CacheAddress, Void> {

    public static final String TABLENAME = "CACHE_ADDRESS";

    /**
     * Properties of entity CacheAddress.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property AddressId = new Property(0, Long.class, "addressId", false, "ADDRESS_ID");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Phone = new Property(2, String.class, "phone", false, "PHONE");
        public final static Property Address = new Property(3, String.class, "address", false, "ADDRESS");
        public final static Property IsDefault = new Property(4, boolean.class, "isDefault", false, "IS_DEFAULT");
    }


    public CacheAddressDao(DaoConfig config) {
        super(config);
    }
    
    public CacheAddressDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CACHE_ADDRESS\" (" + //
                "\"ADDRESS_ID\" INTEGER," + // 0: addressId
                "\"NAME\" TEXT," + // 1: name
                "\"PHONE\" TEXT," + // 2: phone
                "\"ADDRESS\" TEXT," + // 3: address
                "\"IS_DEFAULT\" INTEGER NOT NULL );"); // 4: isDefault
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CACHE_ADDRESS\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, CacheAddress entity) {
        stmt.clearBindings();
 
        Long addressId = entity.getAddressId();
        if (addressId != null) {
            stmt.bindLong(1, addressId);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(3, phone);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(4, address);
        }
        stmt.bindLong(5, entity.getIsDefault() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, CacheAddress entity) {
        stmt.clearBindings();
 
        Long addressId = entity.getAddressId();
        if (addressId != null) {
            stmt.bindLong(1, addressId);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(3, phone);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(4, address);
        }
        stmt.bindLong(5, entity.getIsDefault() ? 1L: 0L);
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public CacheAddress readEntity(Cursor cursor, int offset) {
        CacheAddress entity = new CacheAddress( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // addressId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // phone
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // address
            cursor.getShort(offset + 4) != 0 // isDefault
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, CacheAddress entity, int offset) {
        entity.setAddressId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPhone(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setAddress(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setIsDefault(cursor.getShort(offset + 4) != 0);
     }
    
    @Override
    protected final Void updateKeyAfterInsert(CacheAddress entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(CacheAddress entity) {
        return null;
    }

    @Override
    public boolean hasKey(CacheAddress entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
