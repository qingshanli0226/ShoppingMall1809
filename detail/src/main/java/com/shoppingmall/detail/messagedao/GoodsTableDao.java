package com.shoppingmall.detail.messagedao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.shoppingmall.detail.greendao.GoodsTable;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "GOODS_TABLE".
*/
public class GoodsTableDao extends AbstractDao<GoodsTable, Long> {

    public static final String TABLENAME = "GOODS_TABLE";

    /**
     * Properties of entity GoodsTable.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property GoodPic = new Property(1, String.class, "goodPic", false, "GOOD_PIC");
        public final static Property GoodName = new Property(2, String.class, "goodName", false, "GOOD_NAME");
        public final static Property GoodPrice = new Property(3, String.class, "goodPrice", false, "GOOD_PRICE");
        public final static Property GoodNum = new Property(4, int.class, "goodNum", false, "GOOD_NUM");
    }


    public GoodsTableDao(DaoConfig config) {
        super(config);
    }
    
    public GoodsTableDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"GOODS_TABLE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"GOOD_PIC\" TEXT," + // 1: goodPic
                "\"GOOD_NAME\" TEXT," + // 2: goodName
                "\"GOOD_PRICE\" TEXT," + // 3: goodPrice
                "\"GOOD_NUM\" INTEGER NOT NULL );"); // 4: goodNum
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"GOODS_TABLE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, GoodsTable entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String goodPic = entity.getGoodPic();
        if (goodPic != null) {
            stmt.bindString(2, goodPic);
        }
 
        String goodName = entity.getGoodName();
        if (goodName != null) {
            stmt.bindString(3, goodName);
        }
 
        String goodPrice = entity.getGoodPrice();
        if (goodPrice != null) {
            stmt.bindString(4, goodPrice);
        }
        stmt.bindLong(5, entity.getGoodNum());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, GoodsTable entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String goodPic = entity.getGoodPic();
        if (goodPic != null) {
            stmt.bindString(2, goodPic);
        }
 
        String goodName = entity.getGoodName();
        if (goodName != null) {
            stmt.bindString(3, goodName);
        }
 
        String goodPrice = entity.getGoodPrice();
        if (goodPrice != null) {
            stmt.bindString(4, goodPrice);
        }
        stmt.bindLong(5, entity.getGoodNum());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public GoodsTable readEntity(Cursor cursor, int offset) {
        GoodsTable entity = new GoodsTable( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // goodPic
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // goodName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // goodPrice
            cursor.getInt(offset + 4) // goodNum
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, GoodsTable entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setGoodPic(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setGoodName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setGoodPrice(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setGoodNum(cursor.getInt(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(GoodsTable entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(GoodsTable entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(GoodsTable entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
